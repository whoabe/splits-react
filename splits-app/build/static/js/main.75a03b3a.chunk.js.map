{"version":3,"sources":["loadingcolorbar.gif","UserRow.js","UserTable.js","SearchBar.js","ProductTable.js","ItemRow.js","PersonPanel.js","EmailModal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","UserRow","remainingItem","this","props","UserQuantity","quantity","UserSubtotal","parseFloat","price","toFixed","react_default","a","createElement","description","React","Component","UserTable","_this","taxRate","userSubtotal","remainingItems","map","item","reduce","b","userTax","userTotal","filterText","rows","lastItem","forEach","indexOf","push","UserRow_UserRow","handleInput","key","itemId","className","SearchBar","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleFilterTextChange","bind","assertThisInitialized","e","onFilterTextChange","target","value","type","placeholder","onChange","ProductTable","round5","x","Math","ceil","productSubtotal","items","productTax","productTotal","_this$props","addRow","handleTaxRate","Table","size","index","subtotal","name","onClick","InputGroup","InputGroupAddon","addonType","evt","ItemRow","personId","itemSubtotal","Button","onReduceCount","onAddCount","PersonPanel","personSubtotal","person","personTax","personTotal","ItemRow_ItemRow","onDeletePerson","EmailModal","handleEmail","event","setState","emailValue","handleSubmit","preventDefault","validateEmail","EmailValidator","state","selectedPerson","emailData","i","length","tax","total","emailData2","JSON","stringify","axios","method","url","params","email","subject","message","then","response","jwt","data","auth_token","localStorage","setItem","user","toggleEmailModal","catch","error","isLoading","Fragment","Modal","isOpen","emailModal","toggle","ModalHeader","ModalBody","Form","onSubmit","htmlFor","id","aria-describedby","color","App","calcs","isNaN","handleAddPersonClick","newPerson","persons","concat","toConsumableArray","handleSendPersonEmail","prevState","handleDeletePerson","personsCopy","findIndex","splice","refreshRemainder","updatePersonItems","updatedItems","updatedPersons","j","objectSpread","count","Number","subtotalFunction","personIndex","handleAddCount","console","log","itemIndex","handleReduceCount","newItem","tempItems","tempRemainder","tempPersons","valueType","newValue","targetId","defineProperty","onChangeHandler","selectedFile","files","loaded","onClickHandler","FormData","append","headers","content-type","imageUrl","imageWidth","parseInt","width","imageHeight","height","receiptId","imageCoordFinder","xCoordinate","nativeEvent","offsetX","yCoordinate","offsetY","_this$state","displayHeight","displayWidth","clickedItem","unit_price","existingItemId","checkExistingItem","itemsArrayCopy","itemToCheck","onImgLoad","_ref","img","offsetHeight","offsetWidth","rounding","n","userId","_this2","_this$state2","Row","Col","md","style","Container","src","loading","alt","onLoad","SearchBar_SearchBar","ProductTable_ProductTable","PersonPanel_PersonPanel","onSendPersonEmail","UserTable_UserTable","EmailModal_EmailModal","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75a03b3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loadingcolorbar.f9a75852.gif\";","import React from 'react';\n\nexport default class UserRow extends React.Component {\n    render() {\n        const remainingItem = this.props.remainingItem;\n        // const name = item.stocked ?\n        // // if item stocked is not true, then color the name red\n        //   item.description :\n        //   <span style={{color: 'red'}}>\n        //     {item.description}\n        //   </span>;\n\n        const UserQuantity = remainingItem.quantity\n        // UserQuantity = total item quantity - other people's quantity\n        const UserSubtotal = parseFloat((remainingItem.price * remainingItem.quantity).toFixed(2))\n\n        return (\n            <tr>\n                <td>{remainingItem.description}</td>\n                <td>{UserQuantity}</td>\n                {/* this should be total quanity - sum(other people's quantities) */}\n                <td>{remainingItem.price}</td>\n                <td>{UserSubtotal}</td>\n            </tr>\n        );\n    }\n}","import React from 'react'\nimport UserRow from './UserRow'\n\nexport default class UserTable extends React.Component {\n    render() {\n        const taxRate = this.props.taxRate; \n        const userSubtotal = parseFloat(((this.props.remainingItems.map(item => item.quantity * item.price)).reduce((a, b) => a + b, 0)).toFixed(2));\n        const userTax = parseFloat((userSubtotal * taxRate/100).toFixed(2));\n        const userTotal = (userTax + userSubtotal).toFixed(2)\n        // const userSubtotal = this.props.subtotal;\n        // const userTax = this.props.tax;\n        // const userTotal = this.props.total;\n\n        const filterText = this.props.filterText;\n\n        // const rounding = this.props.rounding;\n        // passed from App\n\n        // const afterRoundingTotal = parseFloat((parseFloat(rounding.toFixed(2)) + parseFloat(parseFloat(userTotal).toFixed(2))).toFixed(2))\n        const rows = [];\n        let lastItem = null;\n\n        this.props.remainingItems.forEach((remainingItem) => {\n            if (remainingItem.description.indexOf(filterText) === -1) {\n                return;\n            }\n\n            if (remainingItem.description !== lastItem) {\n                rows.push(\n                    <UserRow\n                        handleInput = {this.props.handleInput}\n                        remainingItem={remainingItem}\n                        key={remainingItem.itemId} />\n                );\n                lastItem = remainingItem.description\n            }\n        });\n\n\n\n        return (\n      <div className=\"userTable\">\n        <h5>Your Split</h5>\n        <table>\n          <thead>\n            <tr>\n              <th>Item</th>\n              <th>Qty</th>\n              <th>Price</th>\n              <th>Subtotal</th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows}\n            <tr>\n              <td></td>\n              <td></td>\n              {/* this should be total quanity - sum(other people's quantities) */}\n              <td>Subtotal</td>\n              <td className=\"money\">{userSubtotal}</td>\n            </tr>\n            <tr>\n              <td></td>\n              <td></td>\n              {/* this should be total quanity - sum(other people's quantities) */}\n              <td>Tax ({taxRate}%)</td>\n              <td className=\"money\">{userTax}</td>\n            </tr>\n            <tr>\n              <td></td>\n              <td></td>\n              {/* this should be total quanity - sum(other people's quantities) */}\n              <td>Total</td>\n              <td className=\"money\">{userTotal}</td>\n            </tr>\n            {/* <tr>\n              <td></td>\n              <td></td>\n              this should be total quanity - sum(other people's quantities)\n              <td>Rounding</td>\n              <td className=\"money\">{rounding}</td>\n            </tr>\n            <tr>\n              <td></td>\n              <td></td>\n              this should be total quanity - sum(other people's quantities)\n              <td>Total after Rounding</td>\n              <td className=\"money\">{afterRoundingTotal}</td>\n            </tr> */}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}","import React from 'react';\n\nexport default class SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n    }\n\n    handleFilterTextChange(e) {\n        this.props.onFilterTextChange(e.target.value);\n    }\n\n    render() {\n        return (\n            <form>\n                <input\n                    type=\"text\"\n                    placeholder=\"Search items\"\n                    value={this.props.filterText}\n                    onChange={this.handleFilterTextChange} />\n            </form>\n        );\n    }\n}","import React from 'react'\nimport { Table, InputGroup, InputGroupAddon } from 'reactstrap'\n\nexport default class ProductTable extends React.Component {\n    // constructor(props) {\n    //     super(props);\n    //     this.state = {\n    //         taxRate: 6,\n    //     };\n    // }\n    round5= (x) => {\n        return Math.ceil(x/5)*5;\n    }\n\n    // taxChange = (e) => {\n    //     const taxRate = this.props.taxRate; \n    //     if (isNaN(e.target.value)){\n    //         this.setState({taxRate: 0})\n    //     }\n    //     else{\n    //         // this.setState({taxRate: e.target.value})\n    //     }\n    // }\n\n    render () {\n\n    const productSubtotal = parseFloat(((this.props.items.map(item => item.quantity * item.price)).reduce((a, b) => a + b, 0)).toFixed(2));\n    const productTax = parseFloat((productSubtotal * this.props.taxRate/100).toFixed(2));\n    const productTotal = parseFloat((productTax + productSubtotal).toFixed(2));\n    // const productRounding = this.props.rounding\n    // const productRounding = parseFloat((this.round5(productTotal)-productTotal).toFixed(2));\n    // const productAfterRounding = parseFloat((productTotal + productRounding).toFixed(2))\n\n    const {filterText, addRow, items, handleInput, handleTaxRate} = this.props;\n    return (\n        <div>\n            <h5>Tabulated Receipt</h5>\n            <Table size=\"sm\">\n            <thead>\n                <tr>\n                <th>Item</th>\n                <th>Qty</th>\n                <th>Price</th>\n                <th>Subtotal</th>\n                </tr>\n            </thead>\n            <tbody>\n                {items.map((item, index) => {\n                    const subtotal = parseFloat((item.price * item.quantity).toFixed(2))\n                    \n                    return item.description.indexOf(filterText) === -1 \n                    ? null \n                    : (\n                        <tr key={index}>\n                            <td>\n                                <input \n                                    name = 'description'\n                                    value={item.description}\n                                    onChange={(e) => handleInput(e.target.name, e.target.value, item.itemId)}/>\n                            </td>\n                            <td>\n                                <input\n                                    name = 'quantity'\n                                    size=\"2rem\"\n                                    value={item.quantity}\n                                    onChange={(e) => handleInput(e.target.name, e.target.value, item.itemId)}/>\n                            </td>\n                            <td>\n                                <input \n                                    name='price'\n                                    size=\"2rem\"\n                                    value = {item.price}\n                                    onChange={(e) => handleInput(e.target.name, e.target.value, item.itemId)}/>\n                            </td>\n                            <td className=\"money\">{subtotal}</td>\n                        </tr>\n                    );\n\n                })}\n                <tr>\n                    <td className = \"addItemCol\">\n                        {/* <Button type='button' className='btn-success' onClick={addRow}>Add Item</Button> */}\n                        <button type=\"button\" className=\"btn btn-success\"onClick={addRow}>Add Item</button>\n                        {/* <button onClick={addRow} class=\"addItemButton\">Add Item</button> */}\n                    </td>\n                    <td></td>\n                {/* this should be total quanity - sum(other people's quantities) */}\n                    <td>Subtotal</td>\n                    <td className=\"money\">{productSubtotal}</td>\n                </tr>\n                <tr>\n                    <td></td>\n                    <td></td>\n                    {/* this should be total quanity - sum(other people's quantities) */}\n                    <td>\n                        <InputGroup>\n                            <InputGroupAddon addonType=\"prepend\">Tax</InputGroupAddon>\n                            <input \n                                name=\"tax\" \n                                value={this.props.taxRate} \n                                onChange={(evt) => handleTaxRate(evt.target.value)}/>\n                            <InputGroupAddon addonType=\"append\">%</InputGroupAddon>\n                        </InputGroup>\n                    </td>\n                    <td className=\"money\">{productTax}</td>\n                </tr>\n                <tr>\n                    <td></td>\n                    <td></td>\n                    {/* this should be total quanity - sum(other people's quantities) */}\n                    <td>Total</td>\n                    <td className=\"money\">{productTotal}</td>\n                </tr>   \n                {/* <tr>\n                    <td></td>\n                    <td></td>\n                    this should be total quanity - sum(other people's quantities)\n                    <td>Rounding</td>\n                    <td>{productRounding}</td>\n                </tr>\n                    <tr>\n                    <td></td>\n                    <td></td>\n                    this should be total quanity - sum(other people's quantities)\n                    <td>Total after Rounding</td>\n                    <td>{productAfterRounding}</td>\n                </tr> */}\n            </tbody>\n            </Table>\n        </div>\n    );\n    }\n}","import React from 'react'\nimport { Button } from 'reactstrap';\n\nexport default class ItemRow extends React.Component {\n\n    render() {\n        const { item, personId } = this.props\n        const itemSubtotal = parseFloat((item.price * item.quantity).toFixed(2))\n\n        return (\n            <tr>\n                {/* Description */}\n                <td>{item.description}</td>\n\n                {/* Quantity +/- buttons */}\n                <td className=\"quantityRow\">\n                    <Button className=\"spinnerButtons\" onClick={() => this.props.onReduceCount(personId, item.itemId)}>-</Button>\n\n                    <span className=\"px-1\">{item.quantity}</span>\n\n                    <Button className=\"spinnerButtons\" onClick={() => this.props.onAddCount(personId, item.itemId)}>+</Button>\n                </td>\n\n                {/* price */}\n                <td>{item.price}</td>\n\n                {/* subtotal */}\n                <td>{itemSubtotal}</td>\n            </tr>\n        )\n    }\n\n}","import React from 'react';\nimport ItemRow from './ItemRow'\n// import { Button } from 'reactstrap'\n\n\nexport default class PersonPanel extends React.Component {\n    render() {\n\n        const taxRate = this.props.taxRate;\n        const personSubtotal = parseFloat(((this.props.person.items.map(item => item.quantity * item.price)).reduce((a, b) => a + b, 0)).toFixed(2));\n        const personTax = parseFloat((personSubtotal * taxRate/100).toFixed(2));\n        const personTotal = (personTax + personSubtotal).toFixed(2)\n\n        \n        const { person } = this.props\n        // let totalPrice = 0\n        // person.items.forEach(function(item){ totalPrice += (item.price*item.quantity) })\n        \n        const filterText = this.props.filterText;\n\n        const rows = [];\n        let lastItem = null;\n\n        this.props.person.items.forEach((item) => {\n            if (item.description.indexOf(filterText) === -1) {\n                return;\n                }\n            // this filter isnt working\n\n            if (item.description !== lastItem) {\n                rows.push(\n                    <ItemRow\n                        personId={person.personId}\n                        item={item}\n                        key={item.itemId}\n                        onAddCount={this.props.onAddCount}\n                        onReduceCount={this.props.onReduceCount}\n                    />\n                );\n                lastItem = item.description\n            }\n        });\n\n        return (\n            <div className=\"personPanel\">\n                <h5>{person.name} ID: {person.personId}</h5>\n                {/* make this editable */}\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Item</th>\n                            <th>Qty</th>\n                            <th>Price</th>\n                            <th>Subtotal</th>   \n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rows}\n                        <tr>\n                            <td></td>\n                            <td></td>\n                            {/* this should be total quanity - sum(other people's quantities) */}\n                            <td>Subtotal</td>\n                            <td className=\"money\">{personSubtotal}</td>\n                        </tr>\n                        <tr>\n                            <td></td>\n                            <td></td>\n                            {/* this should be total quanity - sum(other people's quantities) */}\n                            <td>Tax ({taxRate}%)</td>\n                            <td className=\"money\">{personTax}</td>\n                        </tr>\n                      \n                        <tr>\n                            <td></td>\n                            <td></td>\n                            {/* this should be total quanity - sum(other people's quantities) */}\n                            <td>Total</td>\n                            <td className=\"money\">{personTotal}</td>\n                        </tr>\n                        \n                        {/* <tr>\n                            <td></td>\n                            <td></td>\n\n                            <td>Rounding</td>\n                            <td></td>\n                        </tr>\n                        <tr>\n                            <td></td>\n                            <td></td>\n\n                            <td>Total after Rounding</td>\n                            <td></td>\n                        </tr> */}\n                        \n                    </tbody>\n                </table>\n                <div className=\"personButtons\">\n                    <button className = \"delete-btn\" onClick={() => this.props.onDeletePerson(person.personId)}>Delete person</button>\n                    {/* <div className=\"divider\"/> */}\n                    {/* <button className = \"email-btn\" onClick={() => this.props.onSendPersonEmail(person)}>Send Email</button> */}\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form} from 'reactstrap';\nimport * as EmailValidator from 'email-validator'\nimport axios from 'axios'\n\nexport default class EmailModal extends React.Component{\n    constructor(props) {\n        // constructor sets the initial state of the component\n        //points the gloval context of this keyword\n        super(props);\n        this.state = {\n            emailValue: \"\",\n            //initializing the state\n        }\n    }\n\n    handleEmail = (event) => {\n        //want to change the state and accept\n        // console.log(event.target.value);\n        this.setState({\n            emailValue: event.target.value  \n        })\n    }\n\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        // const data = this.props.data\n        // // const persons = this.props.persons\n        // const data2 = JSON.stringify(data)\n        const validateEmail = EmailValidator.validate(this.state.emailValue)\n        let selectedPerson = this.props.selectedPerson\n        let emailData = []\n        emailData.push(\"name \", selectedPerson.name, \"items \")\n        \n        for (let i = 0; i < selectedPerson.items.length; i++) { \n            if (selectedPerson.items[i].quantity > 0) {\n                emailData.push(\"{\", selectedPerson.items[i].description, \"qty: \", selectedPerson.items[i].quantity, \"@ \", selectedPerson.items[i].price, \"}\")\n            }\n        }\n        emailData.push(\"subtotal\", selectedPerson.subtotal, \"tax\", selectedPerson.tax, \"total\", selectedPerson.total)\n        let emailData2=JSON.stringify(emailData)\n        // console.log(\"emaildata \" +emailData2)\n        // console.log(\"data \"+data2)\n\n        if (validateEmail){\n               \n            \n            // having zapier hook in the front end is a bad idea since client side is exposed to public and CORS\n            axios({\n                method: 'get',\n                // change this so that it turns into a post to the flask server\n                url: 'https://hooks.zapier.com/hooks/catch/5311861/oyjxd9c',\n                // change this so that it sends to the flask server\n                params: {\n                    \"email\": this.state.emailValue,\n                    \"subject\": \"Message From Splits\",\n                    \"message\": emailData2\n                    // in message, want to input the breakdown of the bill, and how much each people owe.\n                    /*\n                    person 1: items: [\n                        {\"name\": Chic Teri Omu \"quantity\":1 \"price\":15.09}\n                        *exclude items that person has 0 quantity\n                        \"subtotal\": X.XX \"tax\": X.XX \"total\": X.XX\n\n                    User: Items: [\n\n                    ]\n                    */\n                }\n              })\n\n\n            //   sending the data to the flask server\n            // axios({\n            //     method: 'POST',\n            //     url: 'http://localhost:5000/api/v1/detect/upload',\n            //     data: emaildata2,\n            // need to also pass in email value\n            //     headers: { \n            //       'content-type': 'multipart/form-data',\n            //     }\n            //   })\n\n\n            \n            // cant send to sendgrid from react\n            // axios({\n            //     method: 'post',\n            //     url: 'https://api.sendgrid.com/v3/mail/send',\n            //     headers: {\n            //         'Authorization': 'Bearer key', \n            //         'content-type': 'application/json',\n            //         'Access-Control-Allow-Origin': '*',\n            //     },\n            //     data: {\n            //         personalizations: [{\"to\": [{\"email\": this.state.emailValue}]}],\n            //         from: {\"email\": \"sendeexampexample@example.com\"},\n            //         subject: \"Hello, World!\",\n            //         content: [{\"type\": \"text/plain\", \"value\": \"Heya!\"}]\n            //     }\n\n            //   })\n\n              .then(response => {\n    \n                const jwt = response.data.auth_token\n                localStorage.setItem('jwt', jwt)\n                localStorage.setItem('current_user', JSON.stringify(response.data.user))\n    \n                this.props.toggleEmailModal()\n              })\n              .catch(error => {\n                if (error) {\n                    this.setState({\n                        isLoading: false\n                    })\n                }\n              });\n          }\n        }\n    \n\n    render() {\n        return (\n            <>\n                <Modal isOpen={this.props.emailModal} toggle={this.props.toggleEmailModal}>\n                {/* isOpen is the emailModal property (basically passing down props from the navbar state: emailModal) same thing for toggle*/}\n\n                    <ModalHeader toggle={this.props.toggleEmailModal}>Send Email</ModalHeader>\n                    {/* why is this toggle needed in here?? */}\n\n                    \n\n                    <ModalBody> \n\n                        <Form onSubmit = {this.handleSubmit}>\n                        {/* when the form is submitted, the handlesubmit function is called  */}\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"exampleInputEmail1\">Email</label>\n                                <input value = {this.state.emailValue} onChange = {this.handleEmail} type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\"/>\n                            </div>\n\n\n                            <Button type = 'submit' color=\"primary\" >Send Email</Button>{' '}\n                            <Button color=\"secondary\" onClick={this.props.toggleEmailModal}>Cancel</Button>\n                        </Form>\n                    </ModalBody>\n\n                    {/* <ModalFooter>\n                    \n                    </ModalFooter> */}\n                </Modal>\n                \n            </>\n        );\n    }\n\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport UserTable from './UserTable';\nimport SearchBar from './SearchBar';\nimport ProductTable from './ProductTable';\nimport PersonPanel from './PersonPanel';\nimport axios from 'axios';\nimport { Col, Row, Container } from 'reactstrap';\nimport loading from './loadingcolorbar.gif';\nimport EmailModal from './EmailModal';\n// import { CSVLink } from \"react-csv\";\n\n\n\n/*\nStructure\n\nApp\n  -Search\n  -Product Table\n    -Product Row\n    -*Manual add\n  -PersonPanel\n    -Item Row\n  -User Table\n    -User Row\n*/\n\n// const csvData = [];\n\n// const numberStyle = {\n//   fontSize: 25,\n//   // fontWeight: 'bold',\n// }\n// const panelStyle = {\n//   width: 300,\n//   borderRadius: '25px',\n//   marginRight: '15px',\n//   border: '2px solid black',\n//   paddingLeft: '15px',\n//   paddingRight: '15px',\n// }\n\n// var items = [];\n// // items is a list of item objects\n// items.push({itemId: 1, price: 15.09, quantity: 1, description: 'Chic Teri Omu RC'});\n// items.push({itemId: 2, price: 1.13, quantity: 5, description: 'Green Tea'});\n// items.push({itemId: 3, price: 17.92, quantity: 1, description: 'Htt Spicy Pasta'});\n// items.push({itemId: 4, price: 16.04, quantity: 1, description: 'Sirloin S Pasta'});\n// items.push({itemId: 5, price: 10.38, quantity: 1, description: 'Kino Cream Pasta'});\n// items.push({itemId: 6, price: 16.98, quantity: 1, description: 'Sal Cream Pasta'});\n// items.push({itemId: 7, price: 2.83, quantity: 1, description: 'SD-Cream Soup'});\n\nlet personId = 0\n// itemId will have to be changed after the hardcoded values above are removed.\nlet itemId = 1\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterText: '',\n      items: [],\n      persons: [],\n      remainingItems: [],\n      rounding: 0,\n      emailModal: false,\n      data: [],\n      user: [],\n      selectedPerson: {},\n      subtotal: 0,\n      tax: 0,\n      total: 0,\n      selectedFile: null,\n      imageWidth: 0,\n      imageHeight: 0,\n      displayWidth: 0,\n      displayHeight: 0,\n      loaded: 0,\n      taxRate: 0,\n      // csvData: [\"Name\", \"Items\", \"Subtotal\", \"Tax\", \"Total\"],\n      // set remainingItems to the items list\n    };\n\n    this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n  }\n  \n  \n  isFloat(n) {\n    return n === +n && n !== (n|0);\n}\n\n  // roundingFunction = () => {\n  //   let rounding2 = this.state.rounding\n  //   // let subtotal2 = this.state.subtotal\n  //   // let subtotTotal = 0\n\n  //   const subtotal2 = parseFloat(((this.state.items.map(item => item.quantity * item.price)).reduce((a, b) => a + b, 0)).toFixed(2));\n  //   // for (let i = 0; i < this.state.items.length; i++) {\n  //   //   // if (this.state.items[i].price && this.state.items[i].quantity)\n  //   //   const subtotal2 = \n      \n  //   //   // (parseFloat((this.state.items[i].quantity).toFixed(2))) * (parseFloat((this.state.items[i].price).toFixed(2)));\n  //   //   // parseFloat(string) returns an float\n  //   //   subtotTotal += subtotal2\n\n  //   // }\n  //   // console.log('subtotal ' + subtotal2)\n  //   let tax = parseFloat((subtotal2*this.state.taxRate/100).toFixed(2));\n  //   // debugger;\n\n  //   console.log('tax ' + tax)\n  //   let total = tax + subtotal2;\n  //   // console.log('total ' + total)\n\n  //   let roundedTotal = Math.round(total*100/5) *5/100\n  \n  //   /*\n  //   0.00 -> 0\n  //   0.01 -> 0 (-0.01)\n  //   0.02 -> 0 (-0.02)\n  //   0.03 -> 0.05 (+0.02)\n  //   0.04 -> 0.05 (+0.01)\n  //   0.05 -> 0.05 (0)\n  //   */\n\n  //   // console.log('roundedTotal ' + roundedTotal)\n  //   rounding2 = parseFloat((roundedTotal-total).toFixed(2));\n  //   // console.log('rounding2 ' + rounding2)\n  //   this.setState({\n  //     rounding: rounding2, subtotal: subtotal2, tax: tax, total: total\n    \n  //   })\n  // }\n  \n  // handleCSV = () => {\n  //   // csvData: [\"Name\", \"Items\", \"Subtotal\", \"Tax\", \"Total\"],\n  //   var csvData = [...csvData];\n  //   var userList = [\"User\", \"items\", ]\n  //   csvData.push.apply(csvData, userList)\n\n  //   // want csvData to be equal to user if there is no other person\n  //   // once you add a person, then you need to add them into csvData\n  //   // +- items, deleting persons will change csvData\n  //   // handleinput will change csvData\n\n  // }\n\n  calcs = () => {\n    const subtotal = parseFloat(((this.state.items.map(item => item.quantity * item.price)).reduce((a, b) => a + b, 0)).toFixed(2));\n\n    let tax = parseFloat((subtotal*this.state.taxRate/100).toFixed(2));\n\n    let total = tax + subtotal;\n\n    this.setState({\n      subtotal: subtotal,\n      tax: tax,\n      total: total\n    })\n  }\n\n  handleFilterTextChange(filterText) {\n    this.setState({\n      filterText: filterText\n    });\n  }\n\n  handleTaxRate=(evt) => {\n    // debugger;\n    if (isNaN(evt)){\n      this.setState({taxRate: 0})\n    }\n    else{\n        evt = parseFloat(evt);\n        this.setState({taxRate: evt}, ()=> this.calcs())\n    }\n  }\n\n  handleAddPersonClick= () => {\n    const newPerson = {\n      name: 'Person',\n      personId: personId++,\n      items: [],\n      subtotal: 0,\n      tax: 0,\n      total: 0,\n    }\n    // newPerson is an object with name: Person, personId=personID++, and empty item list\n\n    for (let index in this.state.items) {\n        // this.state.items is referencing the items states list, not the items list\n      newPerson.items.push({ \n        //   push adds an item into the array\n        // add the food item as an array from state into the local items list for newPerson\n        itemId: this.state.items[index].itemId, \n        quantity: 0,\n        // everytime a new person is added, need to have all the items passed to them, but with 0 quantity\n        description: this.state.items[index].description,\n        price: this.state.items[index].price\n      })\n    }\n    this.setState({\n      persons: [...this.state.persons, newPerson],\n      data: [...this.state.data, newPerson]\n    //   persons is a list with the previous persons and the new person\n    })\n\n  }\n\n\n  // handleSendPersonEmail\n  // takes in person, which is an element of the state: persons defined in the persons.map\n  handleSendPersonEmail = (person) => {\n    \n    // want to pass the person's id to EmailModal\n    // var personsCopy = [...this.state.persons];\n    // var index = personsCopy.findIndex(personsCopy => personsCopy.personId === personId)\n    // const personIndex = persons.findIndex(persons => persons.personId === personId)\n    this.setState(prevState => ({\n      emailModal: !prevState.emailModal,\n      selectedPerson: person\n    })); \n  }\n\n  handleDeletePerson = personId => { \n    var personsCopy = [...this.state.persons]; \n    var index = personsCopy.findIndex(personsCopy => personsCopy.personId === personId)\n    if (index !== -1) {\n      personsCopy.splice(index, 1);\n      this.setState({persons: personsCopy}, () => {\n        this.refreshRemainder()\n      });\n      // personId--;\n    }\n\n  }\n\n  updatePersonItems = () => {\n    // update the item names for each person\n    // the item description and price have been updated, but they havent been updated in the this.state.persons.items.description\n    \n    let updatedItems = [...this.state.items]\n    // creates a copy of items\n    let updatedPersons = [...this.state.persons]\n    // creates a copy of persons\n    \n    // debugger;\n    for (let i= 0; i < updatedPersons.length; i++) {\n      // for every person\n      for (let j=0; j< updatedItems.length; j++) {\n        \n        updatedPersons[i].items[j].description = updatedItems[j].description; \n        updatedPersons[i].items[j].price = updatedItems[j].price;\n        // = {\n        //   itemId: updatedItems[i].itemId,\n        //   description: updatedItems[i].description,\n        //   price: updatedItems[i].price,\n        //   quantity: updatedPersons[j].items[i]\n        // }\n        // debugger;\n      }\n    }\n    \n    \n    this.setState({persons: updatedPersons})\n    // debugger;\n  }\n\n  refreshRemainder = () => {\n    // this function calculates remainingItems \n\n    // remainingItems is an array of the length of items, in this case, remainingItems = array[6]\n    let remainingItems = [...this.state.remainingItems]\n\n    const user = {...this.state.user}\n    \n    for (let i = 0; i < this.state.items.length; i++) {\n    // goes through every item\n    \n      let count = Number(this.state.items[i].quantity)\n\n      for (let j = 0; j < this.state.persons.length; j++) {\n        // console.log(this.state.persons[j].items[i])\n        // debugger;\n        count -= this.state.persons[j].items[i].quantity\n      }\n      \n      remainingItems[i] = { \n        itemId: this.state.items[i].itemId,\n        description: this.state.items[i].description,\n        price: this.state.items[i].price,\n        quantity: count \n      }\n    }\n    \n    \n    this.setState({remainingItems}, () => {\n      // this.roundingFunction()\n      user.items = [...this.state.remainingItems]\n      this.setState({ user })\n      this.updatePersonItems()\n      // this.setState({ data })\n    });\n\n// want this.state.user.items to be equal to remainingItems\n    \n  }\n\n  subtotalFunction = (personId) => {\n  // calculates subtotal, tax, total for the specified person\n    let subtotal = this.state.subtotal\n    let tax = this.state.tax\n    let total = this.state.total\n    const persons = [...this.state.persons]\n\n    let personIndex = persons.findIndex(persons => persons.personId === personId)\n    // pass personid to find the correct person, \n    persons[personIndex] = {...persons[personIndex]}\n    // persons[personIndex] is the person you are changing\n    // persons[personIndex] is a duplicate of the person you are changing\n\n    // let personItems = persons[personIndex].items\n\n    // run the calcs to find the subtotal, tax, total\n    for (let i = 0; i < persons[personIndex].items.length; i++) { \n      if (persons[personIndex].items[i].quantity > 0) {\n        subtotal += parseFloat((persons[personIndex].items[i].quantity * persons[personIndex].items[i].price).toFixed(2))\n      }\n    }\n    tax = parseFloat((subtotal * 0.06).toFixed(2))\n    total = parseFloat((subtotal + tax).toFixed(2))\n\n    persons[personIndex].subtotal = subtotal\n    persons[personIndex].tax = tax\n    persons[personIndex].total = total\n\n    // setstate on the subtotal, tax, total, and persons\n    this.setState({ persons })\n  }\n\n  handleAddCount = (personId, itemId) => {\n    console.log(`Add count - itemId: ${itemId}, personId: ${personId}`)\n\n    const persons = [...this.state.persons]\n    // persons = a duplicate object of this.state.persons\n  \n    const personIndex = persons.findIndex(persons => persons.personId === personId)\n\n    // find the person's index in persons array\n    // array.findIndex(callback(element[, index[, array]])[, thisArg])\n\n    persons[personIndex] = {...persons[personIndex]}\n\n    const itemIndex = persons[personIndex].items.findIndex(item => item.itemId === itemId)\n\n    \n    if (this.state.remainingItems[itemIndex].quantity === 0) { return }\n    // if there is no more quantity of this item, then returns out\n\n    persons[personIndex].items[itemIndex] = {...persons[personIndex].items[itemIndex]}\n\n    persons[personIndex].items[itemIndex].quantity++\n\n    this.setState({ persons }, () => this.subtotalFunction(personId))\n    this.refreshRemainder()\n  }\n\n\n  handleReduceCount = (personId, itemId) => {\n    console.log(`Reduce count - itemId: ${itemId}, personId: ${personId}`)\n\n    const persons = [...this.state.persons]\n    const personIndex = persons.findIndex(person => person.personId === personId)\n\n    persons[personIndex] = {...persons[personIndex]}\n\n    const itemIndex = persons[personIndex].items.findIndex(item => item.itemId === itemId)\n    //Cannot read property 'findIndex' of undefined\n\n    if (persons[personIndex].items[itemIndex].quantity === 0) { return }\n\n    persons[personIndex].items[itemIndex] = {...persons[personIndex].items[itemIndex]}\n    persons[personIndex].items[itemIndex].quantity--\n\n    this.setState({ persons }, () => this.subtotalFunction(personId))\n    this.refreshRemainder()\n  }\n\n  // adds new items to the items state list\n  addRow = () => {\n    const newItem = {\n      itemId : itemId++,\n      price: 0,\n      quantity: 0,\n      description: \"\"\n    }\n    const tempItems = [...this.state.items, newItem]\n    const tempRemainder = [...this.state.remainingItems, newItem]\n\n    const tempPersons = [...this.state.persons]\n    for (let i = 0; i < tempPersons.length; i++) {\n      tempPersons[i].items.push(newItem)\n  }\n\n    this.setState({\n      items: tempItems,\n      remainingItems: tempRemainder,\n      persons: tempPersons\n    })\n  }\n\n\n  handleInput = (valueType, newValue, targetId) => {\n    // takes in e.target.name, e.target.value, item.itemId)\n\n    const items = this.state.items.map(item => ({\n      ...item,\n      [valueType]: item.itemId === targetId ? (valueType === \"quantity\" || valueType === \"price\" ? parseFloat(newValue) : newValue) : item[valueType]\n\n      // [valueType]: item.itemId === targetId ? newValue : item[valueType]\n      // if item.itemID is equal to targetId, then valueType=newValue else valueType = item[valueType]\n\n      // item.itemId === targetId ? (valueType === (\"quantity\" || \"price\") ? float(newValue) : newValue) : item[valueType]\n      //  [valueType] will change the valuetype i pass in. e.g. if i pass in 'quantity', it will change the item[quantity] to the newvalue I passed in\n      // condition ? value-if-true : value-if-false\n\n      //valueType === \"quantity\" || valueType === \"price\"  (quantity to int and price to float)\n    }))\n    this.setState({items : items}, ()=>this.refreshRemainder(), this.calcs())\n    // also want it to update the user items and the person items\n  }\n\n  componentDidMount() {\n    \n    \n    // this.roundingFunction()\n    \n    // adding user and having items set to a copy of items state\n    let user = {\n      name: 'User',\n      userId: 0,\n      items: [...this.state.items],\n      subtotal: 0,\n      tax: 0,\n      total: 0\n    }\n    // add user into user state here\n    this.setState({\n      user: user,\n      data: [...this.state.data, user],\n    //   persons is a list with the previous persons and the new person\n    })\n  }\n\n  componentDidUpdate() {\n\n    // need to update the items for the user and every person, or do this update in the handleInput functoin\n    \n\n    // console.log(\"data \"+JSON.stringify(this.state.data))\n    // console.log(\"persons \"+JSON.stringify(this.state.persons))\n    // console.log(\"user.items \" +JSON.stringify(this.state.user.items))\n   \n  }\n\n  onChangeHandler = e => {\n    this.setState({\n      selectedFile: e.target.files[0],\n      loaded: 0,\n    })\n  }\n\n\n  onClickHandler = () => {\n  // function for taking in the receipt image and sending it to the flask server api and then setting the response as states: imageUrl, imageWidth, imageHeight, receiptId\n    const data = new FormData() \n    data.append('user_file', this.state.selectedFile)\n    //to make loading screen appear lol\n    this.setState({loaded:0.1})\n    axios({\n      method: 'POST',\n      url: 'http://localhost:5000/api/v1/detect/upload',\n      data: data,\n      headers: { \n        'content-type': 'multipart/form-data',\n      }\n    })\n    .then((response) => {\n      this.setState({imageUrl : response.data.url, imageWidth: parseInt(response.data.width), imageHeight: parseInt(response.data.height), receiptId: response.data.receiptId, loaded: 1})\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  imageCoordFinder = (e) => {\n  // finds the coords of the displayed image based on the displayview and image size states and also sets the newitem states if the clickedcoords are in the receipt\n    var xCoordinate = parseInt(e.nativeEvent.offsetX);\n    var yCoordinate = parseInt(e.nativeEvent.offsetY);\n    const {imageWidth, imageHeight, displayHeight, displayWidth} = this.state\n    xCoordinate = parseInt(xCoordinate*imageWidth/displayWidth)\n    yCoordinate = parseInt(yCoordinate*imageHeight/displayHeight)\n    axios({\n      method: 'POST',\n      url: `http://localhost:5000/api/v1/detect/${this.state.receiptId}`,\n      data: `${xCoordinate}, ${yCoordinate}`,\n      headers: { \n        'content-type': 'text/plain',\n      }\n    })\n    .then((response) => {\n      console.log(response)\n      if (response.data!=='not found'){\n        const clickedItem = {price: response.data.unit_price, quantity: response.data.quantity, description: response.data.description}\n        const existingItemId = this.checkExistingItem(clickedItem)\n        if (existingItemId !== -1 && this.state.items.length > 0){\n          const itemsArrayCopy = [...this.state.items]\n          itemsArrayCopy[existingItemId-1].quantity += clickedItem.quantity\n          this.setState({\n            items: itemsArrayCopy,\n            remainingItems : itemsArrayCopy\n          })\n        } else{\n          clickedItem['itemId'] = itemId++\n          this.setState({\n            items:[...this.state.items, clickedItem],\n            remainingItems:[...this.state.remainingItems, clickedItem]\n          })\n        }\n      }\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  }\n\n  checkExistingItem = (itemToCheck) =>{\n    for (let i=0; i<this.state.items.length; i++){\n      if((this.state.items[i].description === itemToCheck.description) && (this.state.items[i].price === itemToCheck.price)){\n        console.log(this.state.items[i].itemId)\n        return this.state.items[i].itemId\n      }\n    }\n    return -1\n  }\n\n  onImgLoad = ({target:img}) => {\n    // loads the image \n    this.setState({displayHeight:img.offsetHeight,\n    displayWidth:img.offsetWidth});\n  }\n  \n  render() {\n    const { items, imageUrl, loaded, filterText, persons, remainingItems } = this.state\n    const { onChangeHandler, onClickHandler, onImgLoad, imageCoordFinder, addRow, handleFilterTextChange, handleInput, handleAddPersonClick, handleDeletePerson, handleAddCount,\n      handleReduceCount, handleTaxRate } = this\n    return (\n      <div>\n        <Row>\n          <Col md=\"6\" style={{'height': '100vh'}} className=\"receiptDisplay\">\n            {\n              !imageUrl && loaded === 0\n            ? \n              <Container className=\"h-100 d-flex justify-content-center align-items-center\">\n                <div className=\"fileInputGroup form-group files d-flex flex-column justify-content-center w-50\">\n                  <label>Upload Receipt Image </label>\n                  <input type=\"file\" className=\"fileInput\" name=\"file\" onChange={onChangeHandler}/>\n                  <button type=\"button\" className=\"btn btn-success justify-self-center\" onClick={onClickHandler}>Upload</button> \n                </div>\n              </Container>\n            :\n              <div className=\"h-100\">\n                {loaded !== 1\n                ? \n                  <Container className=\"h-100 d-flex justify-content-center align-items-center\"> \n                    <img src={loading} alt=\"\"/>\n                  </Container>\n                : \n                  <div>\n                    <img src={imageUrl} id=\"pic\" onLoad={onImgLoad} onClick={imageCoordFinder} alt=\"\" style={{width:\"100%\"}}/>\n                  </div>\n                }\n              </div>\n            }\n          </Col>\n          <Col md=\"6\">\n            <Container className=\"searchBar w-50 mb-2 d-flex justify-content-center align-items-center\">\n              <SearchBar \n                filterText = {filterText}\n                onFilterTextChange={handleFilterTextChange}/>\n            </Container>\n            <ProductTable \n              items={items} \n              filterText ={filterText}\n              handleInput = {handleInput}\n              addRow = {addRow}\n              taxRate = {this.state.taxRate}\n              handleTaxRate = {handleTaxRate}/>\n\n            {/* <Button onClick={handleAddPersonClick}>\n              Add Person\n            </Button> */}\n            <h5>Other's Split</h5>\n            <button type=\"button\" className=\"btn btn-success\"onClick={handleAddPersonClick}>Add Person</button>\n\n            {/* creates the PersonPanel for each person */}\n\n            <div className=\"personPanelHolder\">\n              { persons.map((person, index) => \n                  <PersonPanel \n                    key = {index}\n                    person={person} \n                    onDeletePerson={handleDeletePerson} \n                    onAddCount={handleAddCount}\n                    onReduceCount={handleReduceCount}\n                    onSendPersonEmail={this.handleSendPersonEmail}\n                    taxRate={this.state.taxRate}\n                    filterText = {filterText}\n                    /> ) }\n            </div>\n\n            <UserTable \n              handleInput = {handleInput}\n              remainingItems={remainingItems} \n              filterText ={filterText}\n              rounding={this.state.rounding}\n\n              subtotal = {this.state.subtotal}\n              tax = {this.state.tax}\n              total = {this.state.total}\n              taxRate = {this.state.taxRate}\n            />\n            {/* <button type=\"button\" className=\"btn btn-success\"onClick={csvData}>Download Data</button> */}\n            {/* <CSVLink data={[...this.state.data]}>Download Data</CSVLink>  */}\n            {/* <a download=\"generatedBy_react-csv.csv\" target=\"_self\" href=\"blob:http://localhost:3000/c18b6189-b7df-4f81-954d-99482a42aa21\">Download Data</a> */}\n          </Col>\n        </Row>\n          {/* passing items to the following components as props */}\n        <EmailModal \n          emailModal={this.state.emailModal} \n          toggleEmailModal={this.handleSendPersonEmail} \n          selectedPerson = {this.state.selectedPerson}\n        />\n\n        \n\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}